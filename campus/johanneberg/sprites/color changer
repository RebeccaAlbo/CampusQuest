import bpy

def make_object_single_user(obj):
    """Ensure the object has a unique mesh to avoid multi-user errors."""
    if obj.data.users > 1:
        obj.data = obj.data.copy()

def check_intersection(obj1, obj2):
    """Returns True if obj1 and obj2 intersect using Boolean modifier."""
    # Create fully independent copies to avoid modifying original objects
    temp_obj1 = obj1.copy()
    temp_obj2 = obj2.copy()

    make_object_single_user(temp_obj1)
    make_object_single_user(temp_obj2)

    bpy.context.collection.objects.link(temp_obj1)
    bpy.context.collection.objects.link(temp_obj2)

    # Apply transformations
    bpy.context.view_layer.objects.active = temp_obj1
    bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

    bpy.context.view_layer.objects.active = temp_obj2
    bpy.ops.object.transform_apply(location=True, rotation=True, scale=True)

    # Add Boolean modifier to check intersection
    bool_mod = temp_obj1.modifiers.new(name="IntersectCheck", type='BOOLEAN')
    bool_mod.operation = 'INTERSECT'
    bool_mod.object = temp_obj2

    # Apply the modifier and check if the intersection produced geometry
    bpy.context.view_layer.objects.active = temp_obj1
    bpy.ops.object.modifier_apply(modifier="IntersectCheck")

    intersecting = len(temp_obj1.data.polygons) > 0  # True if intersection has polygons

    # Cleanup: Remove temporary objects
    bpy.data.objects.remove
